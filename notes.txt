See notes for previous courses.

JUST SAY NO to tutorialspoint.com

first lab: include instructions for how to show all files, and show extensions. talk about folders & such.


CS topics to mention:
 - Algorithms (complexity theory, efficiency)
 - Theory (what *is* computable, after all?)
 - Programming languages (how to design PL, types)
 - Graphics (e.g., the pixels are all half a unit off, color spaces, efficiency, transformations)
 - machine learning (data processing, statistics)
 - AI (search, minimax)
 - networking


--------------------------------------
NOTES AFTER SPRING 2018:

Change Robin assignment to explicitly allow students to make whatever face (and skintone) they want.

Teach GCompound, but only basic stuff, like through Pinocchirobin. No more than that. **NO** requirement
for compound objects on Robin or Midterm projects. Students end up drowning in coordinates, and for what
reason? Instead, perhaps put more weight on classes around the data visualization.

Clarify on dataviz not to hard-code #s into code. Rule: changing the numbers in the file shouldn't
invalidate the visualization.

Also: does dataviz specify that it must be pretty? It should.
Also: it should say that the running program must cite sources
Also: it must not take up the entire applet

Do more with recursion

Think hard about what to do during class during FP.

Discuss how I want students to be independent and self-critical, esp. around ungraded labs.

Answer "why Java"
--

Explain style more clearly.

Second midterm didn't get as much practice (on assignments) as first.

-----------------------------------------

NOTES FOR SPRING 2018:

- Fix primes rubric to specifically mention the factors that are printed at the
  end. They must multiply to the original

- Be more explicit about new vocabulary: "class", "method", "parameter", etc.

- Mini-homeworks that are gone over (but not handed in)? I guess these are like
  labs. But I should go over labs more.

----------------------------------------------------------------
NOTES PUT IN A PROMINENT OTHER PLACE

- Re-do feedback form to be more informative. The numbers just aren't all that
helpful. I want more text.

- Include basic code-reading (short answer) questions on exams. Like: what is x after this statement? How many elements does this array hold? Etc.

- Also, consider testing files and I/O on exams.

- And classes.

- Teach how to use, e.g., TextField in a GraphicsProgram

- How can students practice design before the FP?

- Lay out what a class is more clearly. Give examples. Talk more about OOD, even
  if we don't have inheritance. Students are perhaps more capable of dealing with
  abstraction than I think.

- Introduce keyReleased in class.

- Tweak Files assignment (especially around newlines). Do students have enough
  prep for the assignment?

- Tell students that I sometimes struggle to teach "concepts" instead of just
  blasting through code. Ask for help in identifying where we need more time
  on a concept.

----------------------------------------------------------------
DONE NOTES (SPRING 2018)

- Remember to update settings file to ignore resource leaks.

- Use Robin for first project, not Owl. Robin just works better and removes
  unnecessary complication.

- Be much more specific about what features need to be in compound objects.
  List the methods, perhaps.

- Don't have projects due on the second meeting time of the week. Reason: it makes
  it very awkward to have lab time devoted to the project.

- Specify that lines of code with no effect will be penalized.

- Teach about constants and require them. This may force students to think about
  coordinates more on the midterm project.

- On midterm project, remind students that shapes within compound objects should
  be near (0, 0).

- Organization counts on FP (repetitve code)

- Require the appropriate use of data classes on dataviz project.

- dataviz: have students include citation of data source.

- dataviz: avoid magic numbers in code. Instead, read them from the file.

- Tell students that smaller scopes are better. And hold them accountable.

- Talk about homework length expectations.

- All numbers in code should be reasoned about. Well, maybe not all numbers.

- Grade for intentionality. That means I can take off for accidentally-correct code.

- Dataviz: require a scale.

- Tell students how hard the homework is. And that it gets harder.

- Spread out grading percentage? There's a lot right at the end.

- Talk about partnerwork expectations in class 1 or 2.



-----------------------------------------------------------------
DECIDED AGAINST

- Make *requirements* in each homework assignment to clarify the process.
  Specifically check requirements in midterm project against rubric.
--> Students are adults. They have to read to get the requirements. I will
    just grade more harshly.

- Consider making the first exam online.
--> Not necessary. I moved it much later, though.

- Students like the creativity and open-endedness in the last two projects.
  Could I incorporate this earlier? I don't think so, not without a formal
  proposal process. Oh well -- not everything is perfect.

- More small problems (codingbat-ish) earlier.
--> But how??

- Connect exams more to homework. But how? I want to test array recipes, etc., but
  most assignments won't have these.
--> Will acknowledge the disconnect, but I don't think this is worth fixing.
